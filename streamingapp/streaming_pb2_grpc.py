# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import streaming_pb2 as streaming__pb2


class UserServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListAllUsers = channel.unary_stream(
                '/streaming.UserService/ListAllUsers',
                request_serializer=streaming__pb2.PlaylistSongsRequest.SerializeToString,
                response_deserializer=streaming__pb2.User.FromString,
                )


class UserServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListAllUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListAllUsers': grpc.unary_stream_rpc_method_handler(
                    servicer.ListAllUsers,
                    request_deserializer=streaming__pb2.PlaylistSongsRequest.FromString,
                    response_serializer=streaming__pb2.User.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'streaming.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListAllUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/streaming.UserService/ListAllUsers',
            streaming__pb2.PlaylistSongsRequest.SerializeToString,
            streaming__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SongServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListAllSongs = channel.unary_stream(
                '/streaming.SongService/ListAllSongs',
                request_serializer=streaming__pb2.PlaylistSongsRequest.SerializeToString,
                response_deserializer=streaming__pb2.Song.FromString,
                )


class SongServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListAllSongs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SongServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListAllSongs': grpc.unary_stream_rpc_method_handler(
                    servicer.ListAllSongs,
                    request_deserializer=streaming__pb2.PlaylistSongsRequest.FromString,
                    response_serializer=streaming__pb2.Song.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'streaming.SongService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SongService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListAllSongs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/streaming.SongService/ListAllSongs',
            streaming__pb2.PlaylistSongsRequest.SerializeToString,
            streaming__pb2.Song.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UserPlaylistServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListUserPlaylists = channel.unary_stream(
                '/streaming.UserPlaylistService/ListUserPlaylists',
                request_serializer=streaming__pb2.UserPlaylistRequest.SerializeToString,
                response_deserializer=streaming__pb2.Playlist.FromString,
                )


class UserPlaylistServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListUserPlaylists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserPlaylistServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListUserPlaylists': grpc.unary_stream_rpc_method_handler(
                    servicer.ListUserPlaylists,
                    request_deserializer=streaming__pb2.UserPlaylistRequest.FromString,
                    response_serializer=streaming__pb2.Playlist.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'streaming.UserPlaylistService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserPlaylistService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListUserPlaylists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/streaming.UserPlaylistService/ListUserPlaylists',
            streaming__pb2.UserPlaylistRequest.SerializeToString,
            streaming__pb2.Playlist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PlaylistSongsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListPlaylistSongs = channel.unary_stream(
                '/streaming.PlaylistSongsService/ListPlaylistSongs',
                request_serializer=streaming__pb2.PlaylistSongsRequest.SerializeToString,
                response_deserializer=streaming__pb2.Song.FromString,
                )


class PlaylistSongsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListPlaylistSongs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PlaylistSongsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListPlaylistSongs': grpc.unary_stream_rpc_method_handler(
                    servicer.ListPlaylistSongs,
                    request_deserializer=streaming__pb2.PlaylistSongsRequest.FromString,
                    response_serializer=streaming__pb2.Song.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'streaming.PlaylistSongsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PlaylistSongsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListPlaylistSongs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/streaming.PlaylistSongsService/ListPlaylistSongs',
            streaming__pb2.PlaylistSongsRequest.SerializeToString,
            streaming__pb2.Song.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SongPlaylistServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListSongPlaylists = channel.unary_stream(
                '/streaming.SongPlaylistService/ListSongPlaylists',
                request_serializer=streaming__pb2.SongPlaylistRequest.SerializeToString,
                response_deserializer=streaming__pb2.Playlist.FromString,
                )


class SongPlaylistServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListSongPlaylists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SongPlaylistServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListSongPlaylists': grpc.unary_stream_rpc_method_handler(
                    servicer.ListSongPlaylists,
                    request_deserializer=streaming__pb2.SongPlaylistRequest.FromString,
                    response_serializer=streaming__pb2.Playlist.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'streaming.SongPlaylistService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SongPlaylistService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListSongPlaylists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/streaming.SongPlaylistService/ListSongPlaylists',
            streaming__pb2.SongPlaylistRequest.SerializeToString,
            streaming__pb2.Playlist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
